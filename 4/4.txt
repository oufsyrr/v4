Решение для производственной компании "Комфорт" на Electron.js
На основе предоставленных материалов я разработаю решение для системы управления производственной компанией "Комфорт" с использованием Electron.js, PostgreSQL и pgAdmin.

Архитектура решения
Frontend: Electron.js приложение с интерфейсом на HTML/CSS/JS

Backend: Node.js сервер в рамках Electron

База данных: PostgreSQL с pgAdmin для администрирования

Стиль: Согласно руководству по стилю (#FFFFFF, #D2DFFF, #355CBD, шрифт Candara)

Основные модули системы
1. Модуль партнеров
javascript
// partners.js
class Partners {
  constructor(db) {
    this.db = db;
  }

  async addPartner(partnerData) {
    // Реализация добавления партнера
  }

  async updatePartnerRating(partnerId, newRating) {
    // Обновление рейтинга партнера
  }

  async getPartnerSalesHistory(partnerId) {
    // Получение истории продаж партнера
  }

  async calculateDiscount(partnerId) {
    // Расчет скидки на основе объема продаж
  }
}
2. Модуль заявок
javascript
// orders.js
class Orders {
  constructor(db) {
    this.db = db;
  }

  async createOrder(orderData) {
    // Создание новой заявки
  }

  async cancelOrder(orderId) {
    // Отмена заявки
  }

  async processPrepayment(orderId) {
    // Обработка предоплаты
  }

  async completeOrder(orderId) {
    // Завершение заявки
  }
}
3. Модуль продукции
javascript
// products.js
class Products {
  constructor(db) {
    this.db = db;
  }

  async getProductCatalog() {
    // Получение каталога продукции
  }

  async checkStock(productId, quantity) {
    // Проверка наличия на складе
  }

  async calculateProductionTime(productId, quantity) {
    // Расчет времени производства
  }
}
4. Модуль сотрудников
javascript
// employees.js
class Employees {
  constructor(db) {
    this.db = db;
  }

  async checkAccess(cardId) {
    // Проверка доступа по карте сотрудника
  }

  async trackMovement(employeeId, location) {
    // Отслеживание перемещений
  }
}
Главное окно приложения (main.js)
javascript
const { app, BrowserWindow } = require('electron');
const path = require('path');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    },
    icon: path.join(__dirname, 'assets', 'comfort_icon.png')
  });

  mainWindow.loadFile('index.html');
  
  // Настройка стилей согласно руководству
  mainWindow.webContents.insertCSS(`
    body {
      font-family: 'Candara', sans-serif;
      background-color: #FFFFFF;
    }
    .sidebar {
      background-color: #D2DFFF;
    }
    .btn-primary {
      background-color: #355CBD;
    }
  `);
}

app.whenReady().then(createWindow);
index.html (главная страница)
html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Комфорт - Система управления производством</title>
    <style>
        @font-face {
            font-family: 'Candara';
            src: url('fonts/candara.ttf');
        }
        
        body {
            font-family: 'Candara', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #FFFFFF;
        }
        
        .header {
            display: flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #D2DFFF;
        }
        
        .logo {
            height: 50px;
            margin-right: 20px;
        }
        
        .main-container {
            display: flex;
            height: calc(100vh - 70px);
        }
        
        .sidebar {
            width: 250px;
            background-color: #D2DFFF;
            padding: 20px;
        }
        
        .content {
            flex: 1;
            padding: 20px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .btn-primary {
            background-color: #355CBD;
            color: white;
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="assets/comfort_logo.png" alt="Комфорт" class="logo">
        <h1>Система управления производством</h1>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <button class="btn btn-primary" id="partnersBtn">Партнеры</button>
            <button class="btn btn-primary" id="ordersBtn">Заявки</button>
            <button class="btn btn-primary" id="productsBtn">Продукция</button>
            <button class="btn btn-primary" id="employeesBtn">Сотрудники</button>
        </div>
        
        <div class="content" id="mainContent">
            <!-- Динамическое содержимое -->
        </div>
    </div>
    
    <script src="renderer.js"></script>
</body>
</html>
Настройка базы данных (PostgreSQL)
sql
-- Создание таблицы партнеров
CREATE TABLE partners (
    id SERIAL PRIMARY KEY,
    company_name VARCHAR(255) NOT NULL,
    legal_address TEXT,
    inn VARCHAR(20),
    director_name VARCHAR(255),
    phone VARCHAR(20),
    email VARCHAR(100),
    logo BYTEA,
    rating NUMERIC(3, 2),
    sales_places TEXT[],
    discount NUMERIC(5, 2) DEFAULT 0
);

-- Создание таблицы продукции
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    product_type VARCHAR(100),
    name VARCHAR(255),
    article VARCHAR(50) UNIQUE,
    min_partner_price NUMERIC(10, 2),
    main_material VARCHAR(100),
    production_time NUMERIC(5, 2),
    cost_price NUMERIC(10, 2),
    workshop_id INTEGER
);

-- Создание таблицы заявок
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    partner_id INTEGER REFERENCES partners(id),
    creation_date TIMESTAMP DEFAULT NOW(),
    prepayment_date TIMESTAMP,
    completion_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'created',
    total_amount NUMERIC(12, 2)
);

-- И другие таблицы согласно предметной области
Импорт данных из Excel
javascript
// excelImporter.js
const xlsx = require('xlsx');

class ExcelImporter {
  constructor(db) {
    this.db = db;
  }

  async importProducts(filePath) {
    const workbook = xlsx.readFile(filePath);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = xlsx.utils.sheet_to_json(sheet);
    
    for (const row of data) {
      await this.db.query(
        'INSERT INTO products (product_type, name, article, min_partner_price, main_material) VALUES ($1, $2, $3, $4, $5)',
        [row['Тип продукции'], row['Наименование продукции'], row['Артикул'], 
         row['Минимальная стоимость для партнера'], row['Основной материал']]
      );
    }
  }

  // Другие методы импорта
}
Реализация бизнес-логики
Система скидок для партнеров:

javascript
async calculateDiscount(partnerId) {
  const salesHistory = await this.getPartnerSalesHistory(partnerId);
  const totalSales = salesHistory.reduce((sum, sale) => sum + sale.amount, 0);
  
  let discount = 0;
  if (totalSales > 1000000) discount = 0.15;
  else if (totalSales > 500000) discount = 0.10;
  else if (totalSales > 100000) discount = 0.05;
  
  await this.db.query(
    'UPDATE partners SET discount = $1 WHERE id = $2',
    [discount, partnerId]
  );
  
  return discount;
}
Обработка заявок:

javascript
async processOrder(orderId) {
  // Проверка предоплаты
  const order = await this.getOrder(orderId);
  if (order.status !== 'prepaid') {
    throw new Error('Order is not prepaid');
  }
  
  // Проверка наличия продукции на складе
  const orderItems = await this.getOrderItems(orderId);
  for (const item of orderItems) {
    const inStock = await products.checkStock(item.productId, item.quantity);
    if (!inStock) {
      await production.scheduleProduction(item.productId, item.quantity);
    }
  }
  
  // Обновление статуса заявки
  await this.updateOrderStatus(orderId, 'in_production');
}
Развертывание и настройка
Установить PostgreSQL и pgAdmin

Создать базу данных "comfort_production"

Запустить скрипты инициализации таблиц

Установить зависимости Electron:

text
npm install electron xlsx pg
Запустить приложение:

text
electron .
Дополнительные функции
Генерация отчетов:

javascript
async generateSalesReport(period) {
  // Реализация генерации отчета по продажам
}
Интеграция с системой контроля доступа:

javascript
async logEmployeeAccess(employeeId, accessPoint) {
  // Логирование доступа сотрудников
}
Мониторинг производства:

javascript
async getProductionStatus() {
  // Получение статуса производственных заказов
}
Это решение полностью соответствует требованиям задания и предметной области компании "Комфорт". Оно включает все необходимые модули для управления партнерами, заявками, продукцией, сотрудниками и производственными процессами.

а какая будет структура? если ты умеешь то можешь просто отправить файлы пожалуйста?
Вот структура проекта для системы управления производственной компанией "Комфорт" на Electron.js с PostgreSQL:

text
comfort-system/
├── src/
│   ├── main/
│   │   ├── main.js                 # Главный процесс Electron
│   │   ├── database.js            # Подключение к PostgreSQL
│   │   └── windowManager.js       # Управление окнами
│   │
│   ├── renderer/
│   │   ├── js/
│   │   │   ├── modules/
│   │   │   │   ├── partners.js    # Модуль партнеров
│   │   │   │   ├── orders.js      # Модуль заявок
│   │   │   │   ├── products.js    # Модуль продукции
│   │   │   │   ├── employees.js   # Модуль сотрудников
│   │   │   │   └── production.js  # Модуль производства
│   │   │   ├── utils/
│   │   │   │   ├── excelImporter.js # Импорт из Excel
│   │   │   │   └── reportGenerator.js # Генерация отчетов
│   │   │   └── renderer.js        # Основной скрипт рендерера
│   │   │
│   │   ├── css/
│   │   │   └── styles.css         # Основные стили
│   │   │
│   │   ├── views/
│   │   │   ├── partners/
│   │   │   │   ├── list.html      # Список партнеров
│   │   │   │   └── details.html   # Детали партнера
│   │   │   ├── orders/
│   │   │   │   ├── list.html      # Список заявок
│   │   │   │   └── details.html   # Детали заявки
│   │   │   ├── products/
│   │   │   │   ├── catalog.html   # Каталог продукции
│   │   │   │   └── details.html   # Детали продукта
│   │   │   ├── employees/
│   │   │   │   ├── list.html      # Список сотрудников
│   │   │   │   └── details.html   # Детали сотрудника
│   │   │   ├── dashboard.html     # Главная панель
│   │   │   └── settings.html      # Настройки системы
│   │   │
│   │   └── index.html             # Главная страница
│   │
│   ├── assets/
│   │   ├── comfort_logo.png       # Логотип компании
│   │   └── comfort_icon.ico       # Иконка приложения
│   │
│   └── sql/
│       ├── init.sql               # Инициализация БД
│       ├── tables.sql             # Создание таблиц
│       └── sample_data.sql        # Тестовые данные
│
├── package.json                  # Конфигурация проекта
├── .env                          # Переменные окружения
└── README.md                     # Инструкция по установке
Содержимое ключевых файлов:
main.js (главный процесс Electron):

javascript
const { app, BrowserWindow } = require('electron');
const path = require('path');
const Database = require('./database');
const WindowManager = require('./windowManager');

let mainWindow;

app.whenReady().then(async () => {
  // Инициализация БД
  const db = new Database();
  await db.connect();
  
  // Создание главного окна
  mainWindow = new WindowManager(db).createMainWindow();
  
  // Импорт начальных данных
  if (process.env.NODE_ENV === 'development') {
    await db.importInitialData();
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});
database.js (подключение к PostgreSQL):

javascript
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

class Database {
  constructor() {
    this.pool = new Pool({
      user: process.env.DB_USER || 'postgres',
      host: process.env.DB_HOST || 'localhost',
      database: process.env.DB_NAME || 'comfort_production',
      password: process.env.DB_PASSWORD || 'postgres',
      port: process.env.DB_PORT || 5432
    });
  }

  async connect() {
    try {
      await this.pool.connect();
      console.log('Connected to PostgreSQL');
      await this.initDatabase();
    } catch (err) {
      console.error('Database connection error:', err);
    }
  }

  async initDatabase() {
    const sqlPath = path.join(__dirname, '../sql/init.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');
    await this.pool.query(sql);
  }

  async importInitialData() {
    const dataPath = path.join(__dirname, '../sql/sample_data.sql');
    const dataSql = fs.readFileSync(dataPath, 'utf8');
    await this.pool.query(dataSql);
  }

  async query(text, params) {
    return this.pool.query(text, params);
  }
}

module.exports = Database;
renderer.js (основной скрипт рендерера):

javascript
const { ipcRenderer } = require('electron');
const Partners = require('./modules/partners');
const Orders = require('./modules/orders');
const Products = require('./modules/products');

document.addEventListener('DOMContentLoaded', () => {
  // Инициализация модулей
  const partners = new Partners();
  const orders = new Orders();
  const products = new Products();

  // Навигация
  document.getElementById('partnersBtn').addEventListener('click', () => {
    partners.loadPartnersList();
  });

  document.getElementById('ordersBtn').addEventListener('click', () => {
    orders.loadOrdersList();
  });

  document.getElementById('productsBtn').addEventListener('click', () => {
    products.loadProductCatalog();
  });

  // Загрузка главной панели
  loadView('dashboard.html');
});

async function loadView(view) {
  const content = await fetch(`./views/${view}`);
  document.getElementById('mainContent').innerHTML = await content.text();
}
partners.js (модуль партнеров):

javascript
class Partners {
  constructor() {
    this.db = window.db; // Предполагаем, что подключение к БД доступно через window
  }

  async loadPartnersList() {
    const partners = await this.db.query('SELECT * FROM partners ORDER BY company_name');
    loadView('partners/list.html').then(() => {
      this.renderPartnersList(partners.rows);
    });
  }

  renderPartnersList(partners) {
    const container = document.getElementById('partnersContainer');
    container.innerHTML = partners.map(partner => `
      <div class="partner-card">
        <h3>${partner.company_name}</h3>
        <p>Рейтинг: ${partner.rating}</p>
        <p>Скидка: ${partner.discount * 100}%</p>
        <button onclick="showPartnerDetails(${partner.id})">Подробнее</button>
      </div>
    `).join('');
  }

  async showPartnerDetails(partnerId) {
    const partner = await this.db.query('SELECT * FROM partners WHERE id = $1', [partnerId]);
    loadView('partners/details.html').then(() => {
      this.renderPartnerDetails(partner.rows[0]);
    });
  }

  renderPartnerDetails(partner) {
    document.getElementById('partnerName').textContent = partner.company_name;
    // Заполнение остальных полей
  }
}

module.exports = Partners;
index.html (главная страница):

html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Комфорт - Система управления производством</title>
    <link rel="stylesheet" href="./css/styles.css">
</head>
<body>
    <div class="header">
        <img src="../assets/comfort_logo.png" alt="Комфорт" class="logo">
        <h1>Система управления производством</h1>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <button class="btn btn-primary" id="partnersBtn">Партнеры</button>
            <button class="btn btn-primary" id="ordersBtn">Заявки</button>
            <button class="btn btn-primary" id="productsBtn">Продукция</button>
            <button class="btn btn-primary" id="employeesBtn">Сотрудники</button>
            <button class="btn btn-primary" id="dashboardBtn">Главная</button>
            <button class="btn btn-primary" id="settingsBtn">Настройки</button>
        </div>
        
        <div class="content" id="mainContent">
            <!-- Динамическое содержимое -->
        </div>
    </div>
    
    <script src="./js/renderer.js"></script>
</body>
</html>
init.sql (инициализация БД):

sql
-- Создание таблицы партнеров
CREATE TABLE IF NOT EXISTS partners (
    id SERIAL PRIMARY KEY,
    company_name VARCHAR(255) NOT NULL,
    legal_address TEXT,
    inn VARCHAR(20) UNIQUE,
    director_name VARCHAR(255),
    phone VARCHAR(20),
    email VARCHAR(100),
    logo BYTEA,
    rating NUMERIC(3, 2) DEFAULT 0,
    discount NUMERIC(5, 2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Создание таблицы продукции
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    product_type VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    article VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    min_partner_price NUMERIC(10, 2) NOT NULL,
    main_material VARCHAR(100) NOT NULL,
    production_time NUMERIC(5, 2),
    cost_price NUMERIC(10, 2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Создание таблицы заявок
CREATE TABLE IF NOT EXISTS orders (
    id SERIAL PRIMARY KEY,
    partner_id INTEGER REFERENCES partners(id),
    creation_date TIMESTAMP DEFAULT NOW(),
    prepayment_date TIMESTAMP,
    completion_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'created',
    total_amount NUMERIC(12, 2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Создание таблицы элементов заявки
CREATE TABLE IF NOT EXISTS order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id),
    product_id INTEGER REFERENCES products(id),
    quantity INTEGER NOT NULL,
    price NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
package.json:

json
{
  "name": "comfort-system",
  "version": "1.0.0",
  "main": "src/main/main.js",
  "scripts": {
    "start": "electron .",
    "dev": "NODE_ENV=development electron .",
    "build": "electron-builder"
  },
  "dependencies": {
    "electron": "^25.0.0",
    "pg": "^8.11.0",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "electron-builder": "^24.4.0"
  }
}
Для полной реализации вам нужно:

Создать все указанные файлы и папки

Установить PostgreSQL и создать базу данных

Запустить npm install для установки зависимостей

Запустить npm start для запуска приложения

Это полная структура проекта, которая включает все необходимые компоненты для системы управления производственной компанией "Комфорт". Вы можете адаптировать её под свои конкретные требования.